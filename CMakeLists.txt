cmake_minimum_required(VERSION 2.8)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR})
find_package (Threads)
find_package (LibCrafter)
find_package (Boost)
include_directories(${LIBCRAFTER_INCLUDE_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

list(APPEND DIRS ARPPing)
list(APPEND DIRS ARPPingL2Socket)
list(APPEND DIRS BasicPingPong)
list(APPEND DIRS BasicSend)
list(APPEND DIRS CombineIPv4IPv6)
list(APPEND DIRS DHCPRequest)
list(APPEND DIRS DNSQuery)
list(APPEND DIRS DNSSpoof)
list(APPEND DIRS DumpPcap)
list(APPEND DIRS ExampleIPv6)
list(APPEND DIRS HelloWorld)
list(APPEND DIRS IPOptionRecordRoute)
list(APPEND DIRS IPOptions)
list(APPEND DIRS IPv6RoutingHeader)
list(APPEND DIRS NetworkPing)
list(APPEND DIRS PayloadHelloWorld)
list(APPEND DIRS Ping)
list(APPEND DIRS Ping6)
list(APPEND DIRS PingIPv4IPv6)
list(APPEND DIRS ReadPcap)
list(APPEND DIRS SimpleARPPoison)
list(APPEND DIRS SimpleHijackConnection)
list(APPEND DIRS SimpleSniffer)
list(APPEND DIRS SimpleSpoofConnection)
list(APPEND DIRS SimpleTCP)
list(APPEND DIRS SnifferARPPing)
list(APPEND DIRS SnifferARPPoison)
list(APPEND DIRS SnifferNetworkPing)
list(APPEND DIRS SpawnARPPoison)
list(APPEND DIRS TCPOptions)
list(APPEND DIRS TCPTraceroute)
list(APPEND DIRS TimeExceeded)
list(APPEND DIRS UDPTraceroute)
list(APPEND DIRS UserSockets)

foreach(loop_var ${DIRS})
	add_executable (${loop_var} ${loop_var}/main.cpp)
	target_link_libraries (${loop_var} ${CMAKE_THREAD_LIBS_INIT}
		${LIBCRAFTER_LIBRARY})
endforeach(loop_var)

if(Boost_FOUND)
	include_directories(${Boost_INCLUDE_DIRS})
	add_executable (NULLHeader NULLHeader/main.cpp)
	target_link_libraries (NULLHeader ${CMAKE_THREAD_LIBS_INIT}
		${LIBCRAFTER_LIBRARY} ${Boost_LIBRARIES})

	add_executable (SACKOption SACKOption/main.cpp)
	target_link_libraries (SACKOption ${CMAKE_THREAD_LIBS_INIT}
		${LIBCRAFTER_LIBRARY} ${Boost_LIBRARIES})
endif()

